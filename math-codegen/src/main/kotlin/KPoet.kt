package quest.laxla.spock.math.codegen

import com.squareup.kotlinpoet.*
import kotlin.reflect.KClass

public inline fun file(
	packageName: String,
	name: String,
	block: FileSpec.Builder.() -> Unit
): FileSpec = FileSpec.builder(packageName, name).apply {
	addFileComment("THIS FILE IS AUTOGENERATED; DO NOT COMMIT")
	block()
}.build()

public inline fun FileSpec.Builder.property(
	name: String,
	returnType: TypeName,
	vararg modifiers: KModifier,
	block: PropertySpec.Builder.() -> Unit,
): PropertySpec = PropertySpec.builder(name, returnType, *modifiers).apply(block).build().also(::addProperty)

public inline fun PropertySpec.Builder.getter(block: FunSpec.Builder.() -> Unit): FunSpec =
	FunSpec.getterBuilder().apply(block).build().also(::getter)

public inline fun FileSpec.Builder.function(name: String, block: FunSpec.Builder.() -> Unit): FunSpec =
	FunSpec.builder(name).apply(block).build().also(::addFunction)

public inline fun FunSpec.Builder.parameter(
	name: String,
	returnType: TypeName,
	block: ParameterSpec.Builder.() -> Unit = {}
): ParameterSpec = ParameterSpec.builder(name, returnType).apply(block).build().also(::addParameter)

public inline fun FileSpec.Builder.typeAlias(
	name: String,
	type: TypeName,
	block: TypeAliasSpec.Builder.() -> Unit = {}
): TypeAliasSpec = TypeAliasSpec.builder(name, type).apply(block).build().also(::addTypeAlias)


public inline fun FileSpec.Builder.objectType(
	name: String,
	block: TypeSpec.Builder.() -> Unit = {}
): TypeSpec = TypeSpec.objectBuilder(name).apply(block).build().also(::addType)

public inline fun <A> annotation(
	annotation: KClass<out A>,
	block: AnnotationSpec.Builder.() -> Unit = {}
): AnnotationSpec where A : Annotation = AnnotationSpec.builder(annotation).apply(block).build()

public inline fun <reified A> annotation(block: AnnotationSpec.Builder.() -> Unit = {}): AnnotationSpec where A : Annotation =
	annotation(A::class, block)
